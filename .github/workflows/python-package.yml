# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CGV IMAX crawler

on:
  schedule:
    - cron: '0 * * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: /app/src
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        apt-get update && apt-get -y install cron vim wget unzip curl jq systemd
        CHROME_URL=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json | jq -r '.channels.Stable.downloads.chrome[] | select(.platform == "linux64") | .url') \
        && sudo curl -sSLf --retry 3 --output /tmp/chrome-linux64.zip "$CHROME_URL" \
        && sudo unzip /tmp/chrome-linux64.zip -d /opt \
        && sudo ln -s /opt/chrome-linux64/chrome /usr/local/bin/chrome \
        && sudo rm /tmp/chrome-linux64.zip
        CHROMEDRIVER_URL=$(curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json | jq -r '.channels.Stable.downloads.chromedriver[] | select(.platform == "linux64") | .url') \
        && curl -sSLf --retry 3 --output /tmp/chromedriver-linux64.zip "$CHROMEDRIVER_URL" \
        && unzip -o /tmp/chromedriver-linux64.zip -d /tmp \
        && rm -rf /tmp/chromedriver-linux64.zip \
        && mv -f /tmp/chromedriver-linux64/chromedriver "/usr/local/bin/chromedriver" \
        && chmod +x "/usr/local/bin/chromedriver"
        apt-get install -y chromium chromium-driver
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: set environment variable
      run: |
        echo "SLACK_TOKEN=${{ secrets.SLACK_TOKEN }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
    - name: Setup MySQL
      # You may pin to the exact commit or the version.
      # uses: mirromutth/mysql-action@de1fba8b3f90ce8db80f663a7043be3cf3231248
      uses: mirromutth/mysql-action@v1.1
      with:
        host port: 3306
        container port: 3306
        mysql root password: ${{ secrets.DB_PASSWORD }}
        mysql database: 'cgv'
    - name: Run main.py
      run: |
        python main.py
